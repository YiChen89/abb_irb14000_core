MODULE TRobSynchronization(SYSMODULE)
!======================================================================================================
! Software License Agreement (BSD License) 
!
! Copyright (c) 2015, ABB
! All rights reserved.
!
! Redistribution and use in source and binary forms, with
! or without modification, are permitted provided that 
! the following conditions are met:
!
!    * Redistributions of source code must retain the 
!      above copyright notice, this list of conditions 
!      and the following disclaimer.
!    * Redistributions in binary form must reproduce the 
!      above copyright notice, this list of conditions 
!      and the following disclaimer in the documentation 
!      and/or other materials provided with the 
!      distribution.
!    * Neither the name of ABB nor the names of its 
!      contributors may be used to endorse or promote 
!      products derived from this software without 
!      specific prior written permission.
!
! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
! AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
! ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
! LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
! DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
! SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
! CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
! OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
! THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
!======================================================================================================




    !==================================================================================================
    ! Data components
    !==================================================================================================
    !-------------------------------------------------
    ! Variables and constants
    !-------------------------------------------------
    ! For syncing the motion tasks (only if using multitasking).
    LOCAL CONST num MAX_NUMBER_OF_MOTION_TASKS := 4;
    PERS bool lock := FALSE;
    PERS tasks task_list{MAX_NUMBER_OF_MOTION_TASKS} := [ [""], [""], [""], [""] ];
    VAR syncident sync0;
    VAR syncident sync1;
    
    ! For creating an alias for the collision avoidance signal.
    ! Note: only used for IRB14000, i.e. YuMi.
    LOCAL VAR string ca_name := "Collision_Avoidance"; 
    LOCAL VAR signaldo ca_signal;




    !==================================================================================================
    ! Primary components
    !==================================================================================================
    PROC prepareSyncList0()
        VAR bool exist := FALSE;
        VAR bool done := FALSE;
        
        WaitTestAndSet lock;
        ! Find out if the motion task is already in the list.
        FOR i FROM 1 TO MAX_NUMBER_OF_MOTION_TASKS DO
            IF  task_list{i}.taskname = GetTaskName() THEN
                exist := TRUE;
            ENDIF
        ENDFOR
        
        ! Add the motion task to the list.
        IF NOT exist THEN
            FOR i FROM 1 TO MAX_NUMBER_OF_MOTION_TASKS DO
                IF  (NOT done) AND (task_list{i}.taskname = stEmpty) THEN
                    task_list{i}.taskname := GetTaskName();
                    done := TRUE;
                ENDIF
            ENDFOR
        ENDIF
        lock := FALSE;
        
        IF using_irb14000 THEN
            AliasIO ca_name, ca_signal;
        ENDIF
        
        ERROR
            TRYNEXT;        
    ENDPROC
    
    PROC doSync0()
        WaitSyncTask \InPos, sync0, task_list;
        
        IF using_irb14000 THEN
            SetDO ca_signal, LOW;
        ENDIF
    ENDPROC
    
    PROC doSync1()
        WaitSyncTask \InPos, sync1, task_list;
        
        IF using_irb14000 THEN
            SetDO ca_signal, HIGH;
        ENDIF
    ENDPROC
    
ENDMODULE